{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLoggedIn: (email, password) => {}\n});\nexport const AuthContextProvider = () => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/theo-/Desktop/section 10 - Handling useReducer - video 117/src/store/auth-context.js"],"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLoggedIn","email","password","AuthContextProvider","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACpCC,EAAAA,UAAU,EAAE,KADwB;AAEpCC,EAAAA,QAAQ,EAAE,MAAM,CAAG,CAFiB;AAGpCC,EAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAG;AAHA,CAApB,CAApB;AAOA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AACrC,QAAM,CAACL,UAAD,EAAaM,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;AAEA,QAAIF,6BAA6B,KAAK,GAAtC,EAA2C;AACvCD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMI,YAAY,GAAG,CAACP,KAAD,EAAQC,QAAR,KAAqB;AACtC;AACA;AACAI,IAAAA,YAAY,CAACG,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GALD;;AAOA,QAAMM,aAAa,GAAG,MAAM;AACxBJ,IAAAA,YAAY,CAACK,UAAb,CAAwB,YAAxB;AACAP,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;AAIH,CAtBM;;GAAMD,mB;;KAAAA,mB;AAwBb,eAAeP,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n    isLoggedIn: false,\r\n    onLogout: () => { },\r\n    onLoggedIn: (email, password) => { }\r\n})\r\n\r\n\r\nexport const AuthContextProvider = () => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\r\n\r\n        if (storedUserLoggedInInformation === '1') {\r\n            setIsLoggedIn(true);\r\n        }\r\n    }, []);\r\n\r\n    const loginHandler = (email, password) => {\r\n        // We should of course check email and password\r\n        // But it's just a dummy/ demo anyways\r\n        localStorage.setItem('isLoggedIn', '1');\r\n        setIsLoggedIn(true);\r\n    };\r\n\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem('isLoggedIn');\r\n        setIsLoggedIn(false);\r\n    };\r\n}\r\n\r\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}