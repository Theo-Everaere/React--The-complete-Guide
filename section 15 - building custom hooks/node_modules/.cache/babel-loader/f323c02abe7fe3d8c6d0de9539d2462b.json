{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.url : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/theo-/Desktop/section 15 - building custom hooks/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMS,WAAW,GAAGR,WAAW,CAAC,MAAOS,QAAP,IAAoB;AAChDJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CACxBT,aAAa,CAACU,GADU,EAExB;AACIC,QAAAA,MAAM,EAAEX,aAAa,CAACW,MAAd,GAAuBX,aAAa,CAACU,GAArC,GAA2C,KADvD;AAEIE,QAAAA,OAAO,EAAEZ,aAAa,CAACY,OAAd,GAAwBZ,aAAa,CAACY,OAAtC,GAAgD,EAF7D;AAGIC,QAAAA,IAAI,EAAEb,aAAa,CAACa,IAAd,GACFC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACa,IAA7B,CADE,GACmC;AAJ7C,OAFwB,CAA5B;;AAUA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AAEAlB,MAAAA,SAAS,CAACiB,IAAD,CAAT;AAEH,KAnBD,CAmBE,OAAOE,GAAP,EAAY;AACVf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACH;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GA1B8B,EA0B5B,CAACH,aAAD,EAAgBC,SAAhB,CA1B4B,CAA/B;AA4BA,SAAO;AACHC,IAAAA,SAAS,EAAEA,SADR;AAEHE,IAAAA,KAAK,EAAEA,KAFJ;AAGHE,IAAAA,WAAW,EAAEA;AAHV,GAAP;AAKH,CArCD;;GAAMP,O;;AAuCN,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from 'react'\r\n\r\nconst useHttp = (requestConfig, applyData) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const sendRequest = useCallback(async (taskText) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch(\r\n                requestConfig.url,\r\n                {\r\n                    method: requestConfig.method ? requestConfig.url : 'GET',\r\n                    headers: requestConfig.headers ? requestConfig.headers : {},\r\n                    body: requestConfig.body ?\r\n                        JSON.stringify(requestConfig.body) : null,\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Request failed!');\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            applyData(data);\r\n\r\n        } catch (err) {\r\n            setError(err.message || 'Something went wrong!');\r\n        }\r\n        setIsLoading(false);\r\n    }, [requestConfig, applyData]);\r\n\r\n    return {\r\n        isLoading: isLoading,\r\n        error: error,\r\n        sendRequest: sendRequest\r\n    };\r\n};\r\n\r\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}