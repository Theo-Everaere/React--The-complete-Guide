{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\theo-\\\\Desktop\\\\section 22- adding authentification\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getDate();\n  const adjEpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjEpirationTime - currentTime;\n  return remainingDuration;\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token; // if token is a string that's not empty, userLoggedIn = true\n  // sinon userLoggedIn = false\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    setTimeout(logoutHandler, 3000);\n  };\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/theo-/Desktop/section 22- adding authentification/src/store/auth-context.js"],"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getDate","adjEpirationTime","getTime","remainingDuration","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","loginHandler","setItem","remainingTime","setTimeout","logoutHandler","removeItem","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACtCC,EAAAA,KAAK,EAAE,EAD+B;AAEtCC,EAAAA,UAAU,EAAE,KAF0B;AAGtCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;AAItCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,gBAAgB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBK,OAAzB,EAAzB;AAEA,QAAMC,iBAAiB,GAAGF,gBAAgB,GAAGH,WAA7C;AACA,SAAOK,iBAAP;AACD,CAND;;AAQA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;AACA,QAAM,CAAChB,KAAD,EAAQiB,QAAR,IAAoBpB,QAAQ,CAACiB,YAAD,CAAlC;AAEA,QAAMI,cAAc,GAAG,CAAC,CAAClB,KAAzB,CAJ4C,CAK5C;AACA;;AAEA,QAAMmB,YAAY,GAAG,CAACnB,KAAD,EAAQK,cAAR,KAA2B;AAC9CY,IAAAA,QAAQ,CAACjB,KAAD,CAAR;AACAe,IAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BpB,KAA9B;AAEA,UAAMqB,aAAa,GAAGjB,sBAAsB,CAACC,cAAD,CAA5C;AAEAiB,IAAAA,UAAU,CAACC,aAAD,EAAgB,IAAhB,CAAV;AACD,GAPD;;AASA,QAAMA,aAAa,GAAG,MAAM;AAC1BN,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAG;AACnBzB,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEiB,cAFO;AAGnBhB,IAAAA,KAAK,EAAEiB,YAHY;AAInBhB,IAAAA,MAAM,EAAEoB;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,YAA7B;AAAA,cACGZ,KAAK,CAACa;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlCM;;GAAMd,mB;;KAAAA,mB;AAoCb,eAAed,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  const currentTime = new Date().getDate();\r\n  const adjEpirationTime = new Date(expirationTime).getTime();\r\n\r\n  const remainingDuration = adjEpirationTime - currentTime;\r\n  return remainingDuration;\r\n};\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const initialToken = localStorage.getItem(\"token\");\r\n  const [token, setToken] = useState(initialToken);\r\n\r\n  const userIsLoggedIn = !!token;\r\n  // if token is a string that's not empty, userLoggedIn = true\r\n  // sinon userLoggedIn = false\r\n\r\n  const loginHandler = (token, expirationTime) => {\r\n    setToken(token);\r\n    localStorage.setItem(\"token\", token);\r\n\r\n    const remainingTime = calculateRemainingTime(expirationTime);\r\n\r\n    setTimeout(logoutHandler, 3000);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    setToken(null);\r\n    localStorage.removeItem(\"token\");\r\n  };\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}