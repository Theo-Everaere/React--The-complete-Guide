{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useForm = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const inputChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isTouched: isTouched,\n    hasError: hasError,\n    inputChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useForm, \"uN9KnldpqRIT2LwByiGz+Mp8wEw=\");\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/theo-/Desktop/section 16 - working with forms and user input/src/hooks/use-form.js"],"names":["useState","useForm","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","inputChangeHandler","event","target","value","inputBlurHandler","reset"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,OAAO,GAAIC,aAAD,IAAmB;AAAA;;AAE/B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAChCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAM;AAChBV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,SAAO;AACHM,IAAAA,KAAK,EAAET,YADJ;AAEHE,IAAAA,SAAS,EAAEA,SAFR;AAGHG,IAAAA,QAAQ,EAAEA,QAHP;AAIHC,IAAAA,kBAJG;AAKHI,IAAAA,gBALG;AAMHC,IAAAA;AANG,GAAP;AASH,CA9BD;;GAAMb,O;;AAgCN,eAAeA,OAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useForm = (validateValue) => {\r\n\r\n    const [enteredValue, setEnteredValue] = useState('');\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueIsValid = validateValue(enteredValue);\r\n    const hasError = !valueIsValid && isTouched;\r\n\r\n    const inputChangeHandler = (event) => {\r\n        setEnteredValue(event.target.value)\r\n    }\r\n\r\n    const inputBlurHandler = (event) => {\r\n        setIsTouched(true)\r\n    }\r\n\r\n    const reset = () => {\r\n        setEnteredValue('');\r\n        setIsTouched(false);\r\n    }\r\n\r\n    return {\r\n        value: enteredValue,\r\n        isTouched: isTouched,\r\n        hasError: hasError,\r\n        inputChangeHandler,\r\n        inputBlurHandler,\r\n        reset\r\n    }\r\n\r\n}\r\n\r\nexport default useForm;"]},"metadata":{},"sourceType":"module"}