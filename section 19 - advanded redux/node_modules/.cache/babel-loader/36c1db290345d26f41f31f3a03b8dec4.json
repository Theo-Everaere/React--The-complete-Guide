{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { uiActions } from './ui-slice';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-6b4a6.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["C:/Users/theo-/Desktop/section 19 - advanded redux/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { uiActions } from './ui-slice';\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        items: [],\r\n        totalQuantity: 0,\r\n    },\r\n    reducers: {\r\n        replaceCart(state, action) {\r\n            state.totalQuantity = action.payload.totalQuantity;\r\n            state.items = action.payload.items;\r\n        },\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find((item) => item.id === newItem.id);\r\n            state.totalQuantity++;\r\n            if (!existingItem) {\r\n                state.items.push({\r\n                    id: newItem.id,\r\n                    price: newItem.price,\r\n                    quantity: 1,\r\n                    totalPrice: newItem.price,\r\n                    name: newItem.title,\r\n                });\r\n            } else {\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find((item) => item.id === id);\r\n            state.totalQuantity--;\r\n            if (existingItem.quantity === 1) {\r\n                state.items = state.items.filter((item) => item.id !== id);\r\n            } else {\r\n                existingItem.quantity--;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const sendCartData = (cart) => {\r\n    return async (dispatch) => {\r\n        dispatch(\r\n            uiActions.showNotification({\r\n                status: 'pending',\r\n                title: 'Sending...',\r\n                message: 'Sending cart data!',\r\n            })\r\n        );\r\n\r\n        const sendRequest = async () => {\r\n            const response = await fetch(\r\n                'https://react-http-6b4a6.firebaseio.com/cart.json',\r\n                {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify(cart),\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Sending cart data failed.');\r\n            }\r\n        };\r\n\r\n        try {\r\n            await sendRequest();\r\n\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'success',\r\n                    title: 'Success!',\r\n                    message: 'Sent cart data successfully!',\r\n                })\r\n            );\r\n        } catch (error) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'Sending cart data failed!',\r\n                })\r\n            );\r\n        }\r\n    };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}