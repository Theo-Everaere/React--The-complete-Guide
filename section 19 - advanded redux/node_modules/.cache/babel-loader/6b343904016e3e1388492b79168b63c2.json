{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.cart.id);\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + newItem.quantity;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/theo-/Desktop/section 19 - advanded redux/src/store/cart-slice.js"],"names":["createSlice","initialCartState","items","totalQuantity","cartSlice","name","initialState","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","cart","push","title","price","quantity","totalPrice","removeItemFromCart","filter","cartActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,aAAa,EAAE;AAA5B,CAAzB;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAEL,gBAFY;AAG1BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACM,IAAR,CAAaD,EAAlD,CAArB;;AACA,UAAI,CAACH,YAAL,EAAmB;AACfJ,QAAAA,KAAK,CAACP,KAAN,CAAYgB,IAAZ,CAAiB;AACbF,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADC;AAEbX,UAAAA,IAAI,EAAEM,OAAO,CAACQ,KAFD;AAGbC,UAAAA,KAAK,EAAET,OAAO,CAACS,KAHF;AAIbC,UAAAA,QAAQ,EAAE,CAJG;AAKbC,UAAAA,UAAU,EAAEX,OAAO,CAACS;AALP,SAAjB;AAOH,OARD,MAQO;AACHP,QAAAA,YAAY,CAACQ,QAAb,GAAwBR,YAAY,CAACQ,QAAb,GAAwBV,OAAO,CAACU,QAAxD;AACAR,QAAAA,YAAY,CAACS,UAAb,GAA0BT,YAAY,CAACS,UAAb,GAA0BX,OAAO,CAACS,KAA5D;AACH;AAEJ,KAjBK;;AAkBNG,IAAAA,kBAAkB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAC9B,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;;AACA,UAAIH,YAAY,CAACQ,QAAb,KAA0B,CAA9B,EAAiC;AAC7BZ,QAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYsB,MAAZ,CAAmBT,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACH,OAFD,MAEO;AACHH,QAAAA,YAAY,CAACQ,QAAb;AACH;AACJ;;AA1BK;AAHgB,CAAD,CAA7B;AAiCA,OAAO,MAAMI,WAAW,GAAGrB,SAAS,CAACsB,OAA9B;AAEP,eAAetB,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCartState = { items: [], totalQuantity: 0 }\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: initialCartState,\r\n    reducers: {\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find(item => item.id === newItem.cart.id)\r\n            if (!existingItem) {\r\n                state.items.push({\r\n                    id: newItem.id,\r\n                    name: newItem.title,\r\n                    price: newItem.price,\r\n                    quantity: 1,\r\n                    totalPrice: newItem.price,\r\n                })\r\n            } else {\r\n                existingItem.quantity = existingItem.quantity + newItem.quantity;\r\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n            }\r\n\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            if (existingItem.quantity === 1) {\r\n                state.items = state.items.filter(item => item.id !== id)\r\n            } else {\r\n                existingItem.quantity--\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}