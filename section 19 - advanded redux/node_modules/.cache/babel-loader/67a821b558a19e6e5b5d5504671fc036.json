{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-6b4a6.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/theo-/Desktop/section 19 - advanded redux/src/store/cart-slice.js"],"names":["createSlice","uiActions","initialCartState","items","totalQuantity","cartSlice","name","initialState","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","title","price","quantity","totalPrice","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst initialCartState = { items: [], totalQuantity: 0 }\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: initialCartState,\r\n    reducers: {\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find(item => item.id === newItem.id)\r\n            state.totalQuantity++\r\n            if (!existingItem) {\r\n                state.items.push({\r\n                    id: newItem.id,\r\n                    name: newItem.title,\r\n                    price: newItem.price,\r\n                    quantity: 1,\r\n                    totalPrice: newItem.price,\r\n                })\r\n            } else {\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n            }\r\n\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            state.totalQuantity--\r\n            if (existingItem.quantity === 1) {\r\n                state.items = state.items.filter(item => item.id !== id)\r\n            } else {\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const sendCartData = (cart) => {\r\n    return async (dispatch) => {\r\n        dispatch(\r\n            uiActions.showNotification({\r\n                status: 'pending',\r\n                title: 'Sending...',\r\n                message: 'Sending cart data!',\r\n            })\r\n        );\r\n\r\n        const sendRequest = async () => {\r\n            const response = await fetch(\r\n                'https://react-http-6b4a6.firebaseio.com/cart.json',\r\n                {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify(cart),\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Sending cart data failed.');\r\n            }\r\n        }\r\n\r\n        try {\r\n            await sendRequest();\r\n\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'success',\r\n                    title: 'Success!',\r\n                    message: 'Sent cart data successfully!',\r\n                })\r\n            );\r\n\r\n        } catch (error) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'Sending cart data failed!',\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}